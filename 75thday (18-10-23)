from collections import defaultdict, deque

class Solution:
    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:
        # Step 1: Create an adjacency list to represent the prerequisite relationships.
        graph = defaultdict(list)
        in_degree = [0] * (n + 1)

        for relation in relations:
            prev_course, next_course = relation
            graph[prev_course].append(next_course)
            in_degree[next_course] += 1

        # Step 2: Find courses with no prerequisites (initial courses).
        initial_courses = [course for course in range(1, n + 1) if in_degree[course] == 0]

        # Step 3: Perform topological sorting to determine the order of course completion.
        queue = deque(initial_courses)
        completion_time = [0] * (n + 1)
        max_time = 0

        while queue:
            course = queue.popleft()
            max_time = max(max_time, completion_time[course] + time[course - 1])

            for next_course in graph[course]:
                in_degree[next_course] -= 1
                completion_time[next_course] = max(completion_time[next_course], completion_time[course] + time[course - 1])

                if in_degree[next_course] == 0:
                    queue.append(next_course)

        # Step 4: The maximum time in 'completion_time' array represents the minimum time required.
        return max_time

# Example usage:
n = 4
relations = [[2, 1], [3, 2], [4, 3]]
time = [5, 2, 1, 6]

solution = Solution()
result = solution.minimumTime(n, relations, time)
print(result)  # Output: 13
